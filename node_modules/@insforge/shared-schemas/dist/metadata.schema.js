import { z } from 'zod';
import { storageBucketSchema } from './storage.schema';
import { tableSchema } from './database.schema';
import { oAuthConfigSchema } from './auth.schema';
export const authMetadataSchema = z.object({
    oauths: z.array(oAuthConfigSchema),
});
export const databaseMetadataSchema = z.object({
    tables: z.array(tableSchema),
    totalSize: z.number(),
});
export const bucketMetadataSchema = storageBucketSchema.extend({
    objectCount: z.number().optional(),
});
export const storageMetadataSchema = z.object({
    buckets: z.array(bucketMetadataSchema),
    totalSize: z.number(),
});
export const edgeFunctionMetadataSchema = z.object({
    slug: z.string(),
    name: z.string(),
    description: z.string().nullable(),
    status: z.string(),
});
export const aiMetadataSchema = z.object({
    models: z.array(z.object({
        inputModality: z.array(z.string()),
        outputModality: z.array(z.string()),
        modelId: z.string(),
    })),
});
export const appMetaDataSchema = z.object({
    auth: authMetadataSchema,
    database: databaseMetadataSchema,
    storage: storageMetadataSchema,
    aiIntegration: aiMetadataSchema.optional(),
    functions: z.array(edgeFunctionMetadataSchema),
    version: z.string().optional(),
});
//# sourceMappingURL=metadata.schema.js.map