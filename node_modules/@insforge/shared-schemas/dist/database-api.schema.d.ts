import { z } from 'zod';
export declare const createTableRequestSchema: z.ZodObject<Pick<{
    tableName: z.ZodString;
    columns: z.ZodArray<z.ZodObject<{
        columnName: z.ZodString;
        type: z.ZodUnion<[z.ZodEnum<[import("./database.schema").ColumnType.STRING, import("./database.schema").ColumnType.DATE, import("./database.schema").ColumnType.DATETIME, import("./database.schema").ColumnType.INTEGER, import("./database.schema").ColumnType.FLOAT, import("./database.schema").ColumnType.BOOLEAN, import("./database.schema").ColumnType.UUID, import("./database.schema").ColumnType.JSON]>, z.ZodString]>;
        defaultValue: z.ZodOptional<z.ZodString>;
        isPrimaryKey: z.ZodOptional<z.ZodBoolean>;
        isNullable: z.ZodBoolean;
        isUnique: z.ZodBoolean;
        foreignKey: z.ZodOptional<z.ZodObject<{
            referenceTable: z.ZodString;
            referenceColumn: z.ZodString;
            onDelete: z.ZodEnum<["CASCADE", "SET NULL", "SET DEFAULT", "RESTRICT", "NO ACTION"]>;
            onUpdate: z.ZodEnum<["CASCADE", "RESTRICT", "NO ACTION"]>;
        }, "strip", z.ZodTypeAny, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }, {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }>, "many">;
    recordCount: z.ZodDefault<z.ZodNumber>;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "tableName" | "columns"> & {
    rlsEnabled: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    tableName: string;
    columns: {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }[];
    rlsEnabled: boolean;
}, {
    tableName: string;
    columns: {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }[];
    rlsEnabled?: boolean | undefined;
}>;
export declare const createTableResponseSchema: z.ZodObject<Pick<{
    tableName: z.ZodString;
    columns: z.ZodArray<z.ZodObject<{
        columnName: z.ZodString;
        type: z.ZodUnion<[z.ZodEnum<[import("./database.schema").ColumnType.STRING, import("./database.schema").ColumnType.DATE, import("./database.schema").ColumnType.DATETIME, import("./database.schema").ColumnType.INTEGER, import("./database.schema").ColumnType.FLOAT, import("./database.schema").ColumnType.BOOLEAN, import("./database.schema").ColumnType.UUID, import("./database.schema").ColumnType.JSON]>, z.ZodString]>;
        defaultValue: z.ZodOptional<z.ZodString>;
        isPrimaryKey: z.ZodOptional<z.ZodBoolean>;
        isNullable: z.ZodBoolean;
        isUnique: z.ZodBoolean;
        foreignKey: z.ZodOptional<z.ZodObject<{
            referenceTable: z.ZodString;
            referenceColumn: z.ZodString;
            onDelete: z.ZodEnum<["CASCADE", "SET NULL", "SET DEFAULT", "RESTRICT", "NO ACTION"]>;
            onUpdate: z.ZodEnum<["CASCADE", "RESTRICT", "NO ACTION"]>;
        }, "strip", z.ZodTypeAny, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }, {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }>, "many">;
    recordCount: z.ZodDefault<z.ZodNumber>;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "tableName" | "columns"> & {
    message: z.ZodString;
    autoFields: z.ZodArray<z.ZodString, "many">;
    nextActions: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    nextActions: string;
    tableName: string;
    columns: {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }[];
    autoFields: string[];
}, {
    message: string;
    nextActions: string;
    tableName: string;
    columns: {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }[];
    autoFields: string[];
}>;
export declare const getTableSchemaResponseSchema: z.ZodObject<{
    tableName: z.ZodString;
    columns: z.ZodArray<z.ZodObject<{
        columnName: z.ZodString;
        type: z.ZodUnion<[z.ZodEnum<[import("./database.schema").ColumnType.STRING, import("./database.schema").ColumnType.DATE, import("./database.schema").ColumnType.DATETIME, import("./database.schema").ColumnType.INTEGER, import("./database.schema").ColumnType.FLOAT, import("./database.schema").ColumnType.BOOLEAN, import("./database.schema").ColumnType.UUID, import("./database.schema").ColumnType.JSON]>, z.ZodString]>;
        defaultValue: z.ZodOptional<z.ZodString>;
        isPrimaryKey: z.ZodOptional<z.ZodBoolean>;
        isNullable: z.ZodBoolean;
        isUnique: z.ZodBoolean;
        foreignKey: z.ZodOptional<z.ZodObject<{
            referenceTable: z.ZodString;
            referenceColumn: z.ZodString;
            onDelete: z.ZodEnum<["CASCADE", "SET NULL", "SET DEFAULT", "RESTRICT", "NO ACTION"]>;
            onUpdate: z.ZodEnum<["CASCADE", "RESTRICT", "NO ACTION"]>;
        }, "strip", z.ZodTypeAny, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }, {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }>, "many">;
    recordCount: z.ZodDefault<z.ZodNumber>;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    tableName: string;
    columns: {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }[];
    recordCount: number;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
}, {
    tableName: string;
    columns: {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
        foreignKey?: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        } | undefined;
    }[];
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    recordCount?: number | undefined;
}>;
export declare const updateTableSchemaRequestSchema: z.ZodObject<{
    addColumns: z.ZodOptional<z.ZodArray<z.ZodObject<Omit<{
        columnName: z.ZodString;
        type: z.ZodUnion<[z.ZodEnum<[import("./database.schema").ColumnType.STRING, import("./database.schema").ColumnType.DATE, import("./database.schema").ColumnType.DATETIME, import("./database.schema").ColumnType.INTEGER, import("./database.schema").ColumnType.FLOAT, import("./database.schema").ColumnType.BOOLEAN, import("./database.schema").ColumnType.UUID, import("./database.schema").ColumnType.JSON]>, z.ZodString]>;
        defaultValue: z.ZodOptional<z.ZodString>;
        isPrimaryKey: z.ZodOptional<z.ZodBoolean>;
        isNullable: z.ZodBoolean;
        isUnique: z.ZodBoolean;
        foreignKey: z.ZodOptional<z.ZodObject<{
            referenceTable: z.ZodString;
            referenceColumn: z.ZodString;
            onDelete: z.ZodEnum<["CASCADE", "SET NULL", "SET DEFAULT", "RESTRICT", "NO ACTION"]>;
            onUpdate: z.ZodEnum<["CASCADE", "RESTRICT", "NO ACTION"]>;
        }, "strip", z.ZodTypeAny, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }>>;
    }, "foreignKey">, "strip", z.ZodTypeAny, {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
    }, {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
    }>, "many">>;
    dropColumns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    updateColumns: z.ZodOptional<z.ZodArray<z.ZodObject<{
        columnName: z.ZodString;
        defaultValue: z.ZodOptional<z.ZodString>;
        newColumnName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        columnName: string;
        defaultValue?: string | undefined;
        newColumnName?: string | undefined;
    }, {
        columnName: string;
        defaultValue?: string | undefined;
        newColumnName?: string | undefined;
    }>, "many">>;
    addForeignKeys: z.ZodOptional<z.ZodArray<z.ZodObject<{
        columnName: z.ZodString;
        foreignKey: z.ZodObject<{
            referenceTable: z.ZodString;
            referenceColumn: z.ZodString;
            onDelete: z.ZodEnum<["CASCADE", "SET NULL", "SET DEFAULT", "RESTRICT", "NO ACTION"]>;
            onUpdate: z.ZodEnum<["CASCADE", "RESTRICT", "NO ACTION"]>;
        }, "strip", z.ZodTypeAny, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }, {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        }>;
    }, "strip", z.ZodTypeAny, {
        columnName: string;
        foreignKey: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        };
    }, {
        columnName: string;
        foreignKey: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        };
    }>, "many">>;
    dropForeignKeys: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    renameTable: z.ZodOptional<z.ZodObject<{
        newTableName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        newTableName: string;
    }, {
        newTableName: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    addColumns?: {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
    }[] | undefined;
    dropColumns?: string[] | undefined;
    updateColumns?: {
        columnName: string;
        defaultValue?: string | undefined;
        newColumnName?: string | undefined;
    }[] | undefined;
    addForeignKeys?: {
        columnName: string;
        foreignKey: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        };
    }[] | undefined;
    dropForeignKeys?: string[] | undefined;
    renameTable?: {
        newTableName: string;
    } | undefined;
}, {
    addColumns?: {
        type: string;
        columnName: string;
        isNullable: boolean;
        isUnique: boolean;
        defaultValue?: string | undefined;
        isPrimaryKey?: boolean | undefined;
    }[] | undefined;
    dropColumns?: string[] | undefined;
    updateColumns?: {
        columnName: string;
        defaultValue?: string | undefined;
        newColumnName?: string | undefined;
    }[] | undefined;
    addForeignKeys?: {
        columnName: string;
        foreignKey: {
            referenceTable: string;
            referenceColumn: string;
            onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
            onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
        };
    }[] | undefined;
    dropForeignKeys?: string[] | undefined;
    renameTable?: {
        newTableName: string;
    } | undefined;
}>;
export declare const updateTableSchemaResponse: z.ZodObject<{
    message: z.ZodString;
    tableName: z.ZodString;
    operations: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    message: string;
    tableName: string;
    operations: string[];
}, {
    message: string;
    tableName: string;
    operations: string[];
}>;
export declare const deleteTableResponse: z.ZodObject<{
    message: z.ZodString;
    tableName: z.ZodString;
    nextActions: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    nextActions: string;
    tableName: string;
}, {
    message: string;
    nextActions: string;
    tableName: string;
}>;
export declare const rawSQLRequestSchema: z.ZodObject<{
    query: z.ZodString;
    params: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
}, "strip", z.ZodTypeAny, {
    query: string;
    params?: any[] | undefined;
}, {
    query: string;
    params?: any[] | undefined;
}>;
export declare const rawSQLResponseSchema: z.ZodObject<{
    rows: z.ZodArray<z.ZodAny, "many">;
    rowCount: z.ZodNullable<z.ZodNumber>;
    fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        dataTypeID: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: string;
        dataTypeID: number;
    }, {
        name: string;
        dataTypeID: number;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    rows: any[];
    rowCount: number | null;
    fields?: {
        name: string;
        dataTypeID: number;
    }[] | undefined;
}, {
    rows: any[];
    rowCount: number | null;
    fields?: {
        name: string;
        dataTypeID: number;
    }[] | undefined;
}>;
export declare const exportRequestSchema: z.ZodObject<{
    tables: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    format: z.ZodDefault<z.ZodEnum<["sql", "json"]>>;
    includeData: z.ZodDefault<z.ZodBoolean>;
    includeFunctions: z.ZodDefault<z.ZodBoolean>;
    includeSequences: z.ZodDefault<z.ZodBoolean>;
    includeViews: z.ZodDefault<z.ZodBoolean>;
    rowLimit: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    format: "json" | "sql";
    includeData: boolean;
    includeFunctions: boolean;
    includeSequences: boolean;
    includeViews: boolean;
    rowLimit: number;
    tables?: string[] | undefined;
}, {
    tables?: string[] | undefined;
    format?: "json" | "sql" | undefined;
    includeData?: boolean | undefined;
    includeFunctions?: boolean | undefined;
    includeSequences?: boolean | undefined;
    includeViews?: boolean | undefined;
    rowLimit?: number | undefined;
}>;
export declare const exportJsonDataSchema: z.ZodObject<{
    timestamp: z.ZodString;
    tables: z.ZodRecord<z.ZodString, z.ZodObject<{
        schema: z.ZodArray<z.ZodObject<{
            columnName: z.ZodString;
            dataType: z.ZodString;
            characterMaximumLength: z.ZodNullable<z.ZodNumber>;
            isNullable: z.ZodString;
            columnDefault: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            columnName: string;
            isNullable: string;
            dataType: string;
            characterMaximumLength: number | null;
            columnDefault: string | null;
        }, {
            columnName: string;
            isNullable: string;
            dataType: string;
            characterMaximumLength: number | null;
            columnDefault: string | null;
        }>, "many">;
        indexes: z.ZodArray<z.ZodObject<{
            indexname: z.ZodString;
            indexdef: z.ZodString;
            isUnique: z.ZodNullable<z.ZodBoolean>;
            isPrimary: z.ZodNullable<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            isUnique: boolean | null;
            indexname: string;
            indexdef: string;
            isPrimary: boolean | null;
        }, {
            isUnique: boolean | null;
            indexname: string;
            indexdef: string;
            isPrimary: boolean | null;
        }>, "many">;
        foreignKeys: z.ZodArray<z.ZodObject<{
            constraintName: z.ZodString;
            columnName: z.ZodString;
            foreignTableName: z.ZodString;
            foreignColumnName: z.ZodString;
            deleteRule: z.ZodNullable<z.ZodString>;
            updateRule: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            columnName: string;
            constraintName: string;
            foreignTableName: string;
            foreignColumnName: string;
            deleteRule: string | null;
            updateRule: string | null;
        }, {
            columnName: string;
            constraintName: string;
            foreignTableName: string;
            foreignColumnName: string;
            deleteRule: string | null;
            updateRule: string | null;
        }>, "many">;
        rlsEnabled: z.ZodOptional<z.ZodBoolean>;
        policies: z.ZodArray<z.ZodObject<{
            policyname: z.ZodString;
            cmd: z.ZodString;
            roles: z.ZodArray<z.ZodString, "many">;
            qual: z.ZodNullable<z.ZodString>;
            withCheck: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            policyname: string;
            cmd: string;
            roles: string[];
            qual: string | null;
            withCheck: string | null;
        }, {
            policyname: string;
            cmd: string;
            roles: string[];
            qual: string | null;
            withCheck: string | null;
        }>, "many">;
        triggers: z.ZodArray<z.ZodObject<{
            triggerName: z.ZodString;
            actionTiming: z.ZodString;
            eventManipulation: z.ZodString;
            actionOrientation: z.ZodString;
            actionCondition: z.ZodNullable<z.ZodString>;
            actionStatement: z.ZodString;
            newTable: z.ZodNullable<z.ZodString>;
            oldTable: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            triggerName: string;
            actionTiming: string;
            eventManipulation: string;
            actionOrientation: string;
            actionCondition: string | null;
            actionStatement: string;
            newTable: string | null;
            oldTable: string | null;
        }, {
            triggerName: string;
            actionTiming: string;
            eventManipulation: string;
            actionOrientation: string;
            actionCondition: string | null;
            actionStatement: string;
            newTable: string | null;
            oldTable: string | null;
        }>, "many">;
        rows: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            columnName: string;
            isNullable: string;
            dataType: string;
            characterMaximumLength: number | null;
            columnDefault: string | null;
        }[];
        indexes: {
            isUnique: boolean | null;
            indexname: string;
            indexdef: string;
            isPrimary: boolean | null;
        }[];
        foreignKeys: {
            columnName: string;
            constraintName: string;
            foreignTableName: string;
            foreignColumnName: string;
            deleteRule: string | null;
            updateRule: string | null;
        }[];
        policies: {
            policyname: string;
            cmd: string;
            roles: string[];
            qual: string | null;
            withCheck: string | null;
        }[];
        triggers: {
            triggerName: string;
            actionTiming: string;
            eventManipulation: string;
            actionOrientation: string;
            actionCondition: string | null;
            actionStatement: string;
            newTable: string | null;
            oldTable: string | null;
        }[];
        rlsEnabled?: boolean | undefined;
        rows?: any[] | undefined;
    }, {
        schema: {
            columnName: string;
            isNullable: string;
            dataType: string;
            characterMaximumLength: number | null;
            columnDefault: string | null;
        }[];
        indexes: {
            isUnique: boolean | null;
            indexname: string;
            indexdef: string;
            isPrimary: boolean | null;
        }[];
        foreignKeys: {
            columnName: string;
            constraintName: string;
            foreignTableName: string;
            foreignColumnName: string;
            deleteRule: string | null;
            updateRule: string | null;
        }[];
        policies: {
            policyname: string;
            cmd: string;
            roles: string[];
            qual: string | null;
            withCheck: string | null;
        }[];
        triggers: {
            triggerName: string;
            actionTiming: string;
            eventManipulation: string;
            actionOrientation: string;
            actionCondition: string | null;
            actionStatement: string;
            newTable: string | null;
            oldTable: string | null;
        }[];
        rlsEnabled?: boolean | undefined;
        rows?: any[] | undefined;
    }>>;
    functions: z.ZodArray<z.ZodObject<{
        functionName: z.ZodString;
        functionDef: z.ZodString;
        kind: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        functionName: string;
        functionDef: string;
        kind: string;
    }, {
        functionName: string;
        functionDef: string;
        kind: string;
    }>, "many">;
    sequences: z.ZodArray<z.ZodObject<{
        sequenceName: z.ZodString;
        startValue: z.ZodString;
        increment: z.ZodString;
        minValue: z.ZodNullable<z.ZodString>;
        maxValue: z.ZodNullable<z.ZodString>;
        cycle: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        sequenceName: string;
        startValue: string;
        increment: string;
        minValue: string | null;
        maxValue: string | null;
        cycle: string;
    }, {
        sequenceName: string;
        startValue: string;
        increment: string;
        minValue: string | null;
        maxValue: string | null;
        cycle: string;
    }>, "many">;
    views: z.ZodArray<z.ZodObject<{
        viewName: z.ZodString;
        definition: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        viewName: string;
        definition: string;
    }, {
        viewName: string;
        definition: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    tables: Record<string, {
        schema: {
            columnName: string;
            isNullable: string;
            dataType: string;
            characterMaximumLength: number | null;
            columnDefault: string | null;
        }[];
        indexes: {
            isUnique: boolean | null;
            indexname: string;
            indexdef: string;
            isPrimary: boolean | null;
        }[];
        foreignKeys: {
            columnName: string;
            constraintName: string;
            foreignTableName: string;
            foreignColumnName: string;
            deleteRule: string | null;
            updateRule: string | null;
        }[];
        policies: {
            policyname: string;
            cmd: string;
            roles: string[];
            qual: string | null;
            withCheck: string | null;
        }[];
        triggers: {
            triggerName: string;
            actionTiming: string;
            eventManipulation: string;
            actionOrientation: string;
            actionCondition: string | null;
            actionStatement: string;
            newTable: string | null;
            oldTable: string | null;
        }[];
        rlsEnabled?: boolean | undefined;
        rows?: any[] | undefined;
    }>;
    timestamp: string;
    functions: {
        functionName: string;
        functionDef: string;
        kind: string;
    }[];
    sequences: {
        sequenceName: string;
        startValue: string;
        increment: string;
        minValue: string | null;
        maxValue: string | null;
        cycle: string;
    }[];
    views: {
        viewName: string;
        definition: string;
    }[];
}, {
    tables: Record<string, {
        schema: {
            columnName: string;
            isNullable: string;
            dataType: string;
            characterMaximumLength: number | null;
            columnDefault: string | null;
        }[];
        indexes: {
            isUnique: boolean | null;
            indexname: string;
            indexdef: string;
            isPrimary: boolean | null;
        }[];
        foreignKeys: {
            columnName: string;
            constraintName: string;
            foreignTableName: string;
            foreignColumnName: string;
            deleteRule: string | null;
            updateRule: string | null;
        }[];
        policies: {
            policyname: string;
            cmd: string;
            roles: string[];
            qual: string | null;
            withCheck: string | null;
        }[];
        triggers: {
            triggerName: string;
            actionTiming: string;
            eventManipulation: string;
            actionOrientation: string;
            actionCondition: string | null;
            actionStatement: string;
            newTable: string | null;
            oldTable: string | null;
        }[];
        rlsEnabled?: boolean | undefined;
        rows?: any[] | undefined;
    }>;
    timestamp: string;
    functions: {
        functionName: string;
        functionDef: string;
        kind: string;
    }[];
    sequences: {
        sequenceName: string;
        startValue: string;
        increment: string;
        minValue: string | null;
        maxValue: string | null;
        cycle: string;
    }[];
    views: {
        viewName: string;
        definition: string;
    }[];
}>;
export declare const exportResponseSchema: z.ZodObject<{
    format: z.ZodEnum<["sql", "json"]>;
    data: z.ZodUnion<[z.ZodString, z.ZodObject<{
        timestamp: z.ZodString;
        tables: z.ZodRecord<z.ZodString, z.ZodObject<{
            schema: z.ZodArray<z.ZodObject<{
                columnName: z.ZodString;
                dataType: z.ZodString;
                characterMaximumLength: z.ZodNullable<z.ZodNumber>;
                isNullable: z.ZodString;
                columnDefault: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                columnName: string;
                isNullable: string;
                dataType: string;
                characterMaximumLength: number | null;
                columnDefault: string | null;
            }, {
                columnName: string;
                isNullable: string;
                dataType: string;
                characterMaximumLength: number | null;
                columnDefault: string | null;
            }>, "many">;
            indexes: z.ZodArray<z.ZodObject<{
                indexname: z.ZodString;
                indexdef: z.ZodString;
                isUnique: z.ZodNullable<z.ZodBoolean>;
                isPrimary: z.ZodNullable<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                isUnique: boolean | null;
                indexname: string;
                indexdef: string;
                isPrimary: boolean | null;
            }, {
                isUnique: boolean | null;
                indexname: string;
                indexdef: string;
                isPrimary: boolean | null;
            }>, "many">;
            foreignKeys: z.ZodArray<z.ZodObject<{
                constraintName: z.ZodString;
                columnName: z.ZodString;
                foreignTableName: z.ZodString;
                foreignColumnName: z.ZodString;
                deleteRule: z.ZodNullable<z.ZodString>;
                updateRule: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                columnName: string;
                constraintName: string;
                foreignTableName: string;
                foreignColumnName: string;
                deleteRule: string | null;
                updateRule: string | null;
            }, {
                columnName: string;
                constraintName: string;
                foreignTableName: string;
                foreignColumnName: string;
                deleteRule: string | null;
                updateRule: string | null;
            }>, "many">;
            rlsEnabled: z.ZodOptional<z.ZodBoolean>;
            policies: z.ZodArray<z.ZodObject<{
                policyname: z.ZodString;
                cmd: z.ZodString;
                roles: z.ZodArray<z.ZodString, "many">;
                qual: z.ZodNullable<z.ZodString>;
                withCheck: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                policyname: string;
                cmd: string;
                roles: string[];
                qual: string | null;
                withCheck: string | null;
            }, {
                policyname: string;
                cmd: string;
                roles: string[];
                qual: string | null;
                withCheck: string | null;
            }>, "many">;
            triggers: z.ZodArray<z.ZodObject<{
                triggerName: z.ZodString;
                actionTiming: z.ZodString;
                eventManipulation: z.ZodString;
                actionOrientation: z.ZodString;
                actionCondition: z.ZodNullable<z.ZodString>;
                actionStatement: z.ZodString;
                newTable: z.ZodNullable<z.ZodString>;
                oldTable: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                triggerName: string;
                actionTiming: string;
                eventManipulation: string;
                actionOrientation: string;
                actionCondition: string | null;
                actionStatement: string;
                newTable: string | null;
                oldTable: string | null;
            }, {
                triggerName: string;
                actionTiming: string;
                eventManipulation: string;
                actionOrientation: string;
                actionCondition: string | null;
                actionStatement: string;
                newTable: string | null;
                oldTable: string | null;
            }>, "many">;
            rows: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            schema: {
                columnName: string;
                isNullable: string;
                dataType: string;
                characterMaximumLength: number | null;
                columnDefault: string | null;
            }[];
            indexes: {
                isUnique: boolean | null;
                indexname: string;
                indexdef: string;
                isPrimary: boolean | null;
            }[];
            foreignKeys: {
                columnName: string;
                constraintName: string;
                foreignTableName: string;
                foreignColumnName: string;
                deleteRule: string | null;
                updateRule: string | null;
            }[];
            policies: {
                policyname: string;
                cmd: string;
                roles: string[];
                qual: string | null;
                withCheck: string | null;
            }[];
            triggers: {
                triggerName: string;
                actionTiming: string;
                eventManipulation: string;
                actionOrientation: string;
                actionCondition: string | null;
                actionStatement: string;
                newTable: string | null;
                oldTable: string | null;
            }[];
            rlsEnabled?: boolean | undefined;
            rows?: any[] | undefined;
        }, {
            schema: {
                columnName: string;
                isNullable: string;
                dataType: string;
                characterMaximumLength: number | null;
                columnDefault: string | null;
            }[];
            indexes: {
                isUnique: boolean | null;
                indexname: string;
                indexdef: string;
                isPrimary: boolean | null;
            }[];
            foreignKeys: {
                columnName: string;
                constraintName: string;
                foreignTableName: string;
                foreignColumnName: string;
                deleteRule: string | null;
                updateRule: string | null;
            }[];
            policies: {
                policyname: string;
                cmd: string;
                roles: string[];
                qual: string | null;
                withCheck: string | null;
            }[];
            triggers: {
                triggerName: string;
                actionTiming: string;
                eventManipulation: string;
                actionOrientation: string;
                actionCondition: string | null;
                actionStatement: string;
                newTable: string | null;
                oldTable: string | null;
            }[];
            rlsEnabled?: boolean | undefined;
            rows?: any[] | undefined;
        }>>;
        functions: z.ZodArray<z.ZodObject<{
            functionName: z.ZodString;
            functionDef: z.ZodString;
            kind: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            functionName: string;
            functionDef: string;
            kind: string;
        }, {
            functionName: string;
            functionDef: string;
            kind: string;
        }>, "many">;
        sequences: z.ZodArray<z.ZodObject<{
            sequenceName: z.ZodString;
            startValue: z.ZodString;
            increment: z.ZodString;
            minValue: z.ZodNullable<z.ZodString>;
            maxValue: z.ZodNullable<z.ZodString>;
            cycle: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            sequenceName: string;
            startValue: string;
            increment: string;
            minValue: string | null;
            maxValue: string | null;
            cycle: string;
        }, {
            sequenceName: string;
            startValue: string;
            increment: string;
            minValue: string | null;
            maxValue: string | null;
            cycle: string;
        }>, "many">;
        views: z.ZodArray<z.ZodObject<{
            viewName: z.ZodString;
            definition: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            viewName: string;
            definition: string;
        }, {
            viewName: string;
            definition: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        tables: Record<string, {
            schema: {
                columnName: string;
                isNullable: string;
                dataType: string;
                characterMaximumLength: number | null;
                columnDefault: string | null;
            }[];
            indexes: {
                isUnique: boolean | null;
                indexname: string;
                indexdef: string;
                isPrimary: boolean | null;
            }[];
            foreignKeys: {
                columnName: string;
                constraintName: string;
                foreignTableName: string;
                foreignColumnName: string;
                deleteRule: string | null;
                updateRule: string | null;
            }[];
            policies: {
                policyname: string;
                cmd: string;
                roles: string[];
                qual: string | null;
                withCheck: string | null;
            }[];
            triggers: {
                triggerName: string;
                actionTiming: string;
                eventManipulation: string;
                actionOrientation: string;
                actionCondition: string | null;
                actionStatement: string;
                newTable: string | null;
                oldTable: string | null;
            }[];
            rlsEnabled?: boolean | undefined;
            rows?: any[] | undefined;
        }>;
        timestamp: string;
        functions: {
            functionName: string;
            functionDef: string;
            kind: string;
        }[];
        sequences: {
            sequenceName: string;
            startValue: string;
            increment: string;
            minValue: string | null;
            maxValue: string | null;
            cycle: string;
        }[];
        views: {
            viewName: string;
            definition: string;
        }[];
    }, {
        tables: Record<string, {
            schema: {
                columnName: string;
                isNullable: string;
                dataType: string;
                characterMaximumLength: number | null;
                columnDefault: string | null;
            }[];
            indexes: {
                isUnique: boolean | null;
                indexname: string;
                indexdef: string;
                isPrimary: boolean | null;
            }[];
            foreignKeys: {
                columnName: string;
                constraintName: string;
                foreignTableName: string;
                foreignColumnName: string;
                deleteRule: string | null;
                updateRule: string | null;
            }[];
            policies: {
                policyname: string;
                cmd: string;
                roles: string[];
                qual: string | null;
                withCheck: string | null;
            }[];
            triggers: {
                triggerName: string;
                actionTiming: string;
                eventManipulation: string;
                actionOrientation: string;
                actionCondition: string | null;
                actionStatement: string;
                newTable: string | null;
                oldTable: string | null;
            }[];
            rlsEnabled?: boolean | undefined;
            rows?: any[] | undefined;
        }>;
        timestamp: string;
        functions: {
            functionName: string;
            functionDef: string;
            kind: string;
        }[];
        sequences: {
            sequenceName: string;
            startValue: string;
            increment: string;
            minValue: string | null;
            maxValue: string | null;
            cycle: string;
        }[];
        views: {
            viewName: string;
            definition: string;
        }[];
    }>]>;
    timestamp: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string | {
        tables: Record<string, {
            schema: {
                columnName: string;
                isNullable: string;
                dataType: string;
                characterMaximumLength: number | null;
                columnDefault: string | null;
            }[];
            indexes: {
                isUnique: boolean | null;
                indexname: string;
                indexdef: string;
                isPrimary: boolean | null;
            }[];
            foreignKeys: {
                columnName: string;
                constraintName: string;
                foreignTableName: string;
                foreignColumnName: string;
                deleteRule: string | null;
                updateRule: string | null;
            }[];
            policies: {
                policyname: string;
                cmd: string;
                roles: string[];
                qual: string | null;
                withCheck: string | null;
            }[];
            triggers: {
                triggerName: string;
                actionTiming: string;
                eventManipulation: string;
                actionOrientation: string;
                actionCondition: string | null;
                actionStatement: string;
                newTable: string | null;
                oldTable: string | null;
            }[];
            rlsEnabled?: boolean | undefined;
            rows?: any[] | undefined;
        }>;
        timestamp: string;
        functions: {
            functionName: string;
            functionDef: string;
            kind: string;
        }[];
        sequences: {
            sequenceName: string;
            startValue: string;
            increment: string;
            minValue: string | null;
            maxValue: string | null;
            cycle: string;
        }[];
        views: {
            viewName: string;
            definition: string;
        }[];
    };
    format: "json" | "sql";
    timestamp: string;
}, {
    data: string | {
        tables: Record<string, {
            schema: {
                columnName: string;
                isNullable: string;
                dataType: string;
                characterMaximumLength: number | null;
                columnDefault: string | null;
            }[];
            indexes: {
                isUnique: boolean | null;
                indexname: string;
                indexdef: string;
                isPrimary: boolean | null;
            }[];
            foreignKeys: {
                columnName: string;
                constraintName: string;
                foreignTableName: string;
                foreignColumnName: string;
                deleteRule: string | null;
                updateRule: string | null;
            }[];
            policies: {
                policyname: string;
                cmd: string;
                roles: string[];
                qual: string | null;
                withCheck: string | null;
            }[];
            triggers: {
                triggerName: string;
                actionTiming: string;
                eventManipulation: string;
                actionOrientation: string;
                actionCondition: string | null;
                actionStatement: string;
                newTable: string | null;
                oldTable: string | null;
            }[];
            rlsEnabled?: boolean | undefined;
            rows?: any[] | undefined;
        }>;
        timestamp: string;
        functions: {
            functionName: string;
            functionDef: string;
            kind: string;
        }[];
        sequences: {
            sequenceName: string;
            startValue: string;
            increment: string;
            minValue: string | null;
            maxValue: string | null;
            cycle: string;
        }[];
        views: {
            viewName: string;
            definition: string;
        }[];
    };
    format: "json" | "sql";
    timestamp: string;
}>;
export declare const importRequestSchema: z.ZodObject<{
    truncate: z.ZodDefault<z.ZodUnion<[z.ZodBoolean, z.ZodEffects<z.ZodString, boolean, string>]>>;
}, "strip", z.ZodTypeAny, {
    truncate: boolean;
}, {
    truncate?: string | boolean | undefined;
}>;
export declare const importResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    message: z.ZodString;
    filename: z.ZodString;
    tables: z.ZodArray<z.ZodString, "many">;
    rowsImported: z.ZodNumber;
    fileSize: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    message: string;
    tables: string[];
    success: boolean;
    filename: string;
    rowsImported: number;
    fileSize: number;
}, {
    message: string;
    tables: string[];
    success: boolean;
    filename: string;
    rowsImported: number;
    fileSize: number;
}>;
export declare const bulkUpsertRequestSchema: z.ZodObject<{
    table: z.ZodString;
    upsertKey: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    table: string;
    upsertKey?: string | undefined;
}, {
    table: string;
    upsertKey?: string | undefined;
}>;
export declare const bulkUpsertResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    message: z.ZodString;
    table: z.ZodString;
    rowsAffected: z.ZodNumber;
    totalRecords: z.ZodNumber;
    filename: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    success: boolean;
    filename: string;
    table: string;
    rowsAffected: number;
    totalRecords: number;
}, {
    message: string;
    success: boolean;
    filename: string;
    table: string;
    rowsAffected: number;
    totalRecords: number;
}>;
export type CreateTableRequest = z.infer<typeof createTableRequestSchema>;
export type CreateTableResponse = z.infer<typeof createTableResponseSchema>;
export type GetTableSchemaResponse = z.infer<typeof getTableSchemaResponseSchema>;
export type UpdateTableSchemaRequest = z.infer<typeof updateTableSchemaRequestSchema>;
export type UpdateTableSchemaResponse = z.infer<typeof updateTableSchemaResponse>;
export type DeleteTableResponse = z.infer<typeof deleteTableResponse>;
export type RawSQLRequest = z.infer<typeof rawSQLRequestSchema>;
export type RawSQLResponse = z.infer<typeof rawSQLResponseSchema>;
export type ExportDatabaseRequest = z.infer<typeof exportRequestSchema>;
export type ExportDatabaseJsonData = z.infer<typeof exportJsonDataSchema>;
export type ExportDatabaseResponse = z.infer<typeof exportResponseSchema>;
export type ImportDatabaseRequest = z.infer<typeof importRequestSchema>;
export type ImportDatabaseResponse = z.infer<typeof importResponseSchema>;
export type BulkUpsertRequest = z.infer<typeof bulkUpsertRequestSchema>;
export type BulkUpsertResponse = z.infer<typeof bulkUpsertResponseSchema>;
//# sourceMappingURL=database-api.schema.d.ts.map