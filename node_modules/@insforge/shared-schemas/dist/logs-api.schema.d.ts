import { z } from 'zod';
export declare const getAuditLogsRequestSchema: z.ZodObject<{
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    actor: z.ZodOptional<z.ZodString>;
    action: z.ZodOptional<z.ZodString>;
    module: z.ZodOptional<z.ZodString>;
    startDate: z.ZodOptional<z.ZodString>;
    endDate: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    limit: number;
    offset: number;
    startDate?: string | undefined;
    endDate?: string | undefined;
    actor?: string | undefined;
    action?: string | undefined;
    module?: string | undefined;
}, {
    startDate?: string | undefined;
    endDate?: string | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    actor?: string | undefined;
    action?: string | undefined;
    module?: string | undefined;
}>;
export declare const getAuditLogsResponseSchema: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        actor: z.ZodString;
        action: z.ZodString;
        module: z.ZodString;
        details: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        ipAddress: z.ZodNullable<z.ZodString>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: string;
        updatedAt: string;
        actor: string;
        action: string;
        module: string;
        details: Record<string, unknown> | null;
        ipAddress: string | null;
    }, {
        id: string;
        createdAt: string;
        updatedAt: string;
        actor: string;
        action: string;
        module: string;
        details: Record<string, unknown> | null;
        ipAddress: string | null;
    }>, "many">;
    pagination: z.ZodObject<{
        limit: z.ZodNumber;
        offset: z.ZodNumber;
        total: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        total: number;
        limit: number;
        offset: number;
    }, {
        total: number;
        limit: number;
        offset: number;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        id: string;
        createdAt: string;
        updatedAt: string;
        actor: string;
        action: string;
        module: string;
        details: Record<string, unknown> | null;
        ipAddress: string | null;
    }[];
    pagination: {
        total: number;
        limit: number;
        offset: number;
    };
}, {
    data: {
        id: string;
        createdAt: string;
        updatedAt: string;
        actor: string;
        action: string;
        module: string;
        details: Record<string, unknown> | null;
        ipAddress: string | null;
    }[];
    pagination: {
        total: number;
        limit: number;
        offset: number;
    };
}>;
export declare const getAuditLogStatsRequestSchema: z.ZodObject<{
    days: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    days: number;
}, {
    days?: number | undefined;
}>;
export declare const getAuditLogStatsResponseSchema: z.ZodObject<{
    totalLogs: z.ZodNumber;
    uniqueActors: z.ZodNumber;
    uniqueModules: z.ZodNumber;
    actionsByModule: z.ZodRecord<z.ZodString, z.ZodNumber>;
    recentActivity: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        actor: z.ZodString;
        action: z.ZodString;
        module: z.ZodString;
        details: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        ipAddress: z.ZodNullable<z.ZodString>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: string;
        updatedAt: string;
        actor: string;
        action: string;
        module: string;
        details: Record<string, unknown> | null;
        ipAddress: string | null;
    }, {
        id: string;
        createdAt: string;
        updatedAt: string;
        actor: string;
        action: string;
        module: string;
        details: Record<string, unknown> | null;
        ipAddress: string | null;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    totalLogs: number;
    uniqueActors: number;
    uniqueModules: number;
    actionsByModule: Record<string, number>;
    recentActivity: {
        id: string;
        createdAt: string;
        updatedAt: string;
        actor: string;
        action: string;
        module: string;
        details: Record<string, unknown> | null;
        ipAddress: string | null;
    }[];
}, {
    totalLogs: number;
    uniqueActors: number;
    uniqueModules: number;
    actionsByModule: Record<string, number>;
    recentActivity: {
        id: string;
        createdAt: string;
        updatedAt: string;
        actor: string;
        action: string;
        module: string;
        details: Record<string, unknown> | null;
        ipAddress: string | null;
    }[];
}>;
export declare const clearAuditLogsRequestSchema: z.ZodObject<{
    daysToKeep: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    daysToKeep: number;
}, {
    daysToKeep?: number | undefined;
}>;
export declare const clearAuditLogsResponseSchema: z.ZodObject<{
    message: z.ZodString;
    deleted: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    message: string;
    deleted: number;
}, {
    message: string;
    deleted: number;
}>;
export type GetAuditLogsRequest = z.infer<typeof getAuditLogsRequestSchema>;
export type GetAuditLogsResponse = z.infer<typeof getAuditLogsResponseSchema>;
export type GetAuditLogStatsRequest = z.infer<typeof getAuditLogStatsRequestSchema>;
export type GetAuditLogStatsResponse = z.infer<typeof getAuditLogStatsResponseSchema>;
export type ClearAuditLogsRequest = z.infer<typeof clearAuditLogsRequestSchema>;
export type ClearAuditLogsResponse = z.infer<typeof clearAuditLogsResponseSchema>;
//# sourceMappingURL=logs-api.schema.d.ts.map