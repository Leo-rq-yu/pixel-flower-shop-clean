import { z } from 'zod';
/**
 * Pagination parameters shared across list endpoints
 */
export declare const paginationSchema: z.ZodObject<{
    limit: z.ZodOptional<z.ZodString>;
    offset: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    limit?: string | undefined;
    offset?: string | undefined;
}, {
    limit?: string | undefined;
    offset?: string | undefined;
}>;
/**
 * POST /api/auth/users - Create user
 */
export declare const createUserRequestSchema: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    email: string;
    password: string;
    name?: string | undefined;
}, {
    email: string;
    password: string;
    name?: string | undefined;
}>;
/**
 * POST /api/auth/sessions - Create session
 */
export declare const createSessionRequestSchema: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    email: string;
    password: string;
}, {
    email: string;
    password: string;
}>;
/**
 * POST /api/auth/admin/sessions - Create admin session
 */
export declare const createAdminSessionRequestSchema: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    email: string;
    password: string;
}, {
    email: string;
    password: string;
}>;
export declare const exchangeAdminSessionRequestSchema: z.ZodObject<{
    code: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
}, {
    code: string;
}>;
/**
 * GET /api/auth/users - List users (query parameters)
 */
export declare const listUsersRequestSchema: z.ZodOptional<z.ZodObject<{
    limit: z.ZodOptional<z.ZodString>;
    offset: z.ZodOptional<z.ZodString>;
} & {
    search: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    limit?: string | undefined;
    offset?: string | undefined;
    search?: string | undefined;
}, {
    limit?: string | undefined;
    offset?: string | undefined;
    search?: string | undefined;
}>>;
/**
 * DELETE /api/auth/users - Delete users (batch)
 */
export declare const deleteUsersRequestSchema: z.ZodObject<{
    userIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    userIds: string[];
}, {
    userIds: string[];
}>;
/**
 * Response for POST /api/auth/users
 */
export declare const createUserResponseSchema: z.ZodObject<{
    user: z.ZodObject<{
        id: z.ZodString;
        email: z.ZodString;
        name: z.ZodString;
        emailVerified: z.ZodBoolean;
        identities: z.ZodOptional<z.ZodArray<z.ZodObject<{
            provider: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            provider: string;
        }, {
            provider: string;
        }>, "many">>;
        providerType: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }, {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }>;
    accessToken: z.ZodString;
}, "strip", z.ZodTypeAny, {
    user: {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    };
    accessToken: string;
}, {
    user: {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    };
    accessToken: string;
}>;
/**
 * Response for POST /api/auth/sessions
 */
export declare const createSessionResponseSchema: z.ZodObject<{
    user: z.ZodObject<{
        id: z.ZodString;
        email: z.ZodString;
        name: z.ZodString;
        emailVerified: z.ZodBoolean;
        identities: z.ZodOptional<z.ZodArray<z.ZodObject<{
            provider: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            provider: string;
        }, {
            provider: string;
        }>, "many">>;
        providerType: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }, {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }>;
    accessToken: z.ZodString;
}, "strip", z.ZodTypeAny, {
    user: {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    };
    accessToken: string;
}, {
    user: {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    };
    accessToken: string;
}>;
/**
 * Response for POST /api/auth/admin/sessions
 */
export declare const createAdminSessionResponseSchema: z.ZodObject<{
    user: z.ZodObject<{
        id: z.ZodString;
        email: z.ZodString;
        name: z.ZodString;
        emailVerified: z.ZodBoolean;
        identities: z.ZodOptional<z.ZodArray<z.ZodObject<{
            provider: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            provider: string;
        }, {
            provider: string;
        }>, "many">>;
        providerType: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }, {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }>;
    accessToken: z.ZodString;
}, "strip", z.ZodTypeAny, {
    user: {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    };
    accessToken: string;
}, {
    user: {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    };
    accessToken: string;
}>;
/**
 * Response for GET /api/auth/sessions/current
 */
export declare const getCurrentSessionResponseSchema: z.ZodObject<{
    user: z.ZodObject<{
        id: z.ZodString;
        email: z.ZodString;
        role: z.ZodEnum<["authenticated", "project_admin"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        role: "authenticated" | "project_admin";
        email: string;
    }, {
        id: string;
        role: "authenticated" | "project_admin";
        email: string;
    }>;
}, "strip", z.ZodTypeAny, {
    user: {
        id: string;
        role: "authenticated" | "project_admin";
        email: string;
    };
}, {
    user: {
        id: string;
        role: "authenticated" | "project_admin";
        email: string;
    };
}>;
/**
 * Response for GET /api/auth/users
 */
export declare const listUsersResponseSchema: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        email: z.ZodString;
        name: z.ZodString;
        emailVerified: z.ZodBoolean;
        identities: z.ZodOptional<z.ZodArray<z.ZodObject<{
            provider: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            provider: string;
        }, {
            provider: string;
        }>, "many">>;
        providerType: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }, {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }>, "many">;
    pagination: z.ZodObject<{
        offset: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        total: number;
        limit: number;
        offset: number;
    }, {
        total: number;
        limit: number;
        offset: number;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }[];
    pagination: {
        total: number;
        limit: number;
        offset: number;
    };
}, {
    data: {
        id: string;
        createdAt: string;
        name: string;
        email: string;
        emailVerified: boolean;
        updatedAt: string;
        identities?: {
            provider: string;
        }[] | undefined;
        providerType?: string | undefined;
    }[];
    pagination: {
        total: number;
        limit: number;
        offset: number;
    };
}>;
/**
 * Response for DELETE /api/auth/users
 */
export declare const deleteUsersResponseSchema: z.ZodObject<{
    message: z.ZodString;
    deletedCount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    message: string;
    deletedCount: number;
}, {
    message: string;
    deletedCount: number;
}>;
/**
 * Response for GET /api/auth/v1/google-auth and GET /api/auth/v1/github-auth
 */
export declare const getOauthUrlResponseSchema: z.ZodObject<{
    authUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    authUrl: string;
}, {
    authUrl: string;
}>;
/**
 * POST /api/auth/oauth/configs - Create OAuth configuration
 */
export declare const createOAuthConfigRequestSchema: z.ZodObject<{
    provider: z.ZodString;
    clientId: z.ZodOptional<z.ZodString>;
    scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    redirectUri: z.ZodOptional<z.ZodString>;
    useSharedKey: z.ZodBoolean;
} & {
    clientSecret: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    provider: string;
    useSharedKey: boolean;
    redirectUri?: string | undefined;
    clientId?: string | undefined;
    scopes?: string[] | undefined;
    clientSecret?: string | undefined;
}, {
    provider: string;
    useSharedKey: boolean;
    redirectUri?: string | undefined;
    clientId?: string | undefined;
    scopes?: string[] | undefined;
    clientSecret?: string | undefined;
}>;
/**
 * PUT /api/auth/oauth/configs/:provider - Update OAuth configuration
 */
export declare const updateOAuthConfigRequestSchema: z.ZodObject<Omit<{
    provider: z.ZodString;
    clientId: z.ZodOptional<z.ZodString>;
    scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    redirectUri: z.ZodOptional<z.ZodString>;
    useSharedKey: z.ZodBoolean;
} & {
    clientSecret: z.ZodOptional<z.ZodString>;
}, "provider">, "strip", z.ZodTypeAny, {
    useSharedKey: boolean;
    redirectUri?: string | undefined;
    clientId?: string | undefined;
    scopes?: string[] | undefined;
    clientSecret?: string | undefined;
}, {
    useSharedKey: boolean;
    redirectUri?: string | undefined;
    clientId?: string | undefined;
    scopes?: string[] | undefined;
    clientSecret?: string | undefined;
}>;
/**
 * Response for GET /api/auth/oauth/configs
 */
export declare const listOAuthConfigsResponseSchema: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        provider: z.ZodString;
        clientId: z.ZodOptional<z.ZodString>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        redirectUri: z.ZodOptional<z.ZodString>;
        useSharedKey: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        useSharedKey: boolean;
        redirectUri?: string | undefined;
        clientId?: string | undefined;
        scopes?: string[] | undefined;
    }, {
        provider: string;
        useSharedKey: boolean;
        redirectUri?: string | undefined;
        clientId?: string | undefined;
        scopes?: string[] | undefined;
    }>, "many">;
    count: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    data: {
        provider: string;
        useSharedKey: boolean;
        redirectUri?: string | undefined;
        clientId?: string | undefined;
        scopes?: string[] | undefined;
    }[];
    count: number;
}, {
    data: {
        provider: string;
        useSharedKey: boolean;
        redirectUri?: string | undefined;
        clientId?: string | undefined;
        scopes?: string[] | undefined;
    }[];
    count: number;
}>;
/**
 * Standard error response format for auth endpoints
 */
export declare const authErrorResponseSchema: z.ZodObject<{
    error: z.ZodString;
    message: z.ZodString;
    statusCode: z.ZodNumber;
    nextActions: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    error: string;
    statusCode: number;
    nextActions?: string | undefined;
}, {
    message: string;
    error: string;
    statusCode: number;
    nextActions?: string | undefined;
}>;
export type CreateUserRequest = z.infer<typeof createUserRequestSchema>;
export type CreateSessionRequest = z.infer<typeof createSessionRequestSchema>;
export type CreateAdminSessionRequest = z.infer<typeof createAdminSessionRequestSchema>;
export type ListUsersRequest = z.infer<typeof listUsersRequestSchema>;
export type DeleteUsersRequest = z.infer<typeof deleteUsersRequestSchema>;
export type CreateOAuthConfigRequest = z.infer<typeof createOAuthConfigRequestSchema>;
export type UpdateOAuthConfigRequest = z.infer<typeof updateOAuthConfigRequestSchema>;
export type CreateUserResponse = z.infer<typeof createUserResponseSchema>;
export type CreateSessionResponse = z.infer<typeof createSessionResponseSchema>;
export type CreateAdminSessionResponse = z.infer<typeof createAdminSessionResponseSchema>;
export type GetCurrentSessionResponse = z.infer<typeof getCurrentSessionResponseSchema>;
export type ListUsersResponse = z.infer<typeof listUsersResponseSchema>;
export type DeleteUsersResponse = z.infer<typeof deleteUsersResponseSchema>;
export type GetOauthUrlResponse = z.infer<typeof getOauthUrlResponseSchema>;
export type ListOAuthConfigsResponse = z.infer<typeof listOAuthConfigsResponseSchema>;
export type AuthErrorResponse = z.infer<typeof authErrorResponseSchema>;
//# sourceMappingURL=auth-api.schema.d.ts.map