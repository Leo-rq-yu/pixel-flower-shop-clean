import { z } from 'zod';
/**
 * Core auth entity schemas (PostgreSQL structure)
 * These define the fundamental auth data models
 */
export declare const userIdSchema: z.ZodString;
export declare const emailSchema: z.ZodString;
export declare const passwordSchema: z.ZodString;
export declare const nameSchema: z.ZodString;
export declare const roleSchema: z.ZodEnum<["authenticated", "project_admin"]>;
/**
 * User entity schema - represents the _user table in PostgreSQL
 */
export declare const userSchema: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodString;
    name: z.ZodString;
    emailVerified: z.ZodBoolean;
    identities: z.ZodOptional<z.ZodArray<z.ZodObject<{
        provider: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        provider: string;
    }, {
        provider: string;
    }>, "many">>;
    providerType: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    name: string;
    email: string;
    emailVerified: boolean;
    updatedAt: string;
    identities?: {
        provider: string;
    }[] | undefined;
    providerType?: string | undefined;
}, {
    id: string;
    createdAt: string;
    name: string;
    email: string;
    emailVerified: boolean;
    updatedAt: string;
    identities?: {
        provider: string;
    }[] | undefined;
    providerType?: string | undefined;
}>;
/**
 * OAuth state for redirect handling
 */
export declare const oAuthProvidersSchema: z.ZodEnum<["google", "github"]>;
export declare const oAuthStateSchema: z.ZodObject<{
    provider: z.ZodEnum<["google", "github"]>;
    redirectUri: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    provider: "google" | "github";
    redirectUri?: string | undefined;
}, {
    provider: "google" | "github";
    redirectUri?: string | undefined;
}>;
export declare const oAuthConfigSchema: z.ZodObject<{
    provider: z.ZodString;
    clientId: z.ZodOptional<z.ZodString>;
    scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    redirectUri: z.ZodOptional<z.ZodString>;
    useSharedKey: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    provider: string;
    useSharedKey: boolean;
    redirectUri?: string | undefined;
    clientId?: string | undefined;
    scopes?: string[] | undefined;
}, {
    provider: string;
    useSharedKey: boolean;
    redirectUri?: string | undefined;
    clientId?: string | undefined;
    scopes?: string[] | undefined;
}>;
/**
 * JWT token payload schema
 */
export declare const tokenPayloadSchema: z.ZodObject<{
    sub: z.ZodString;
    email: z.ZodString;
    role: z.ZodEnum<["authenticated", "project_admin"]>;
    iat: z.ZodOptional<z.ZodNumber>;
    exp: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    role: "authenticated" | "project_admin";
    email: string;
    sub: string;
    iat?: number | undefined;
    exp?: number | undefined;
}, {
    role: "authenticated" | "project_admin";
    email: string;
    sub: string;
    iat?: number | undefined;
    exp?: number | undefined;
}>;
export type UserIdSchema = z.infer<typeof userIdSchema>;
export type EmailSchema = z.infer<typeof emailSchema>;
export type PasswordSchema = z.infer<typeof passwordSchema>;
export type RoleSchema = z.infer<typeof roleSchema>;
export type UserSchema = z.infer<typeof userSchema>;
export type TokenPayloadSchema = z.infer<typeof tokenPayloadSchema>;
export type OAuthConfigSchema = z.infer<typeof oAuthConfigSchema>;
//# sourceMappingURL=auth.schema.d.ts.map