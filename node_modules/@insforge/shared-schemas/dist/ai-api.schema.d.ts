import { z } from 'zod';
export declare const chatMessageSchema: z.ZodObject<{
    role: z.ZodEnum<["user", "assistant", "system"]>;
    content: z.ZodString;
    images: z.ZodOptional<z.ZodArray<z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    role: "user" | "assistant" | "system";
    content: string;
    images?: {
        url: string;
    }[] | undefined;
}, {
    role: "user" | "assistant" | "system";
    content: string;
    images?: {
        url: string;
    }[] | undefined;
}>;
export declare const chatCompletionRequestSchema: z.ZodObject<{
    model: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "assistant", "system"]>;
        content: z.ZodString;
        images: z.ZodOptional<z.ZodArray<z.ZodObject<{
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
        }, {
            url: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        role: "user" | "assistant" | "system";
        content: string;
        images?: {
            url: string;
        }[] | undefined;
    }, {
        role: "user" | "assistant" | "system";
        content: string;
        images?: {
            url: string;
        }[] | undefined;
    }>, "many">;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stream: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    model: string;
    messages: {
        role: "user" | "assistant" | "system";
        content: string;
        images?: {
            url: string;
        }[] | undefined;
    }[];
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    stream?: boolean | undefined;
}, {
    model: string;
    messages: {
        role: "user" | "assistant" | "system";
        content: string;
        images?: {
            url: string;
        }[] | undefined;
    }[];
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    stream?: boolean | undefined;
}>;
export declare const chatCompletionResponseSchema: z.ZodObject<{
    text: z.ZodString;
    metadata: z.ZodOptional<z.ZodObject<{
        model: z.ZodString;
        usage: z.ZodOptional<z.ZodObject<{
            promptTokens: z.ZodOptional<z.ZodNumber>;
            completionTokens: z.ZodOptional<z.ZodNumber>;
            totalTokens: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        }, {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    }, {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    text: string;
    metadata?: {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    } | undefined;
}, {
    text: string;
    metadata?: {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    } | undefined;
}>;
export declare const imageGenerationRequestSchema: z.ZodObject<{
    model: z.ZodString;
    prompt: z.ZodString;
    images: z.ZodOptional<z.ZodArray<z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    model: string;
    prompt: string;
    images?: {
        url: string;
    }[] | undefined;
}, {
    model: string;
    prompt: string;
    images?: {
        url: string;
    }[] | undefined;
}>;
export declare const imageGenerationResponseSchema: z.ZodObject<{
    text: z.ZodOptional<z.ZodString>;
    images: z.ZodArray<z.ZodObject<{
        type: z.ZodLiteral<"imageUrl">;
        imageUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "imageUrl";
        imageUrl: string;
    }, {
        type: "imageUrl";
        imageUrl: string;
    }>, "many">;
    metadata: z.ZodOptional<z.ZodObject<{
        model: z.ZodString;
        usage: z.ZodOptional<z.ZodObject<{
            promptTokens: z.ZodOptional<z.ZodNumber>;
            completionTokens: z.ZodOptional<z.ZodNumber>;
            totalTokens: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        }, {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    }, {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    images: {
        type: "imageUrl";
        imageUrl: string;
    }[];
    text?: string | undefined;
    metadata?: {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    } | undefined;
}, {
    images: {
        type: "imageUrl";
        imageUrl: string;
    }[];
    text?: string | undefined;
    metadata?: {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    } | undefined;
}>;
export declare const openRouterModelSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    created: z.ZodNumber;
    description: z.ZodOptional<z.ZodString>;
    architecture: z.ZodOptional<z.ZodObject<{
        inputModalities: z.ZodArray<z.ZodString, "many">;
        outputModalities: z.ZodArray<z.ZodString, "many">;
        tokenizer: z.ZodString;
        instructType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        inputModalities: string[];
        outputModalities: string[];
        tokenizer: string;
        instructType: string;
    }, {
        inputModalities: string[];
        outputModalities: string[];
        tokenizer: string;
        instructType: string;
    }>>;
    topProvider: z.ZodOptional<z.ZodObject<{
        isModerated: z.ZodBoolean;
        contextLength: z.ZodNumber;
        maxCompletionTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        isModerated: boolean;
        contextLength: number;
        maxCompletionTokens: number;
    }, {
        isModerated: boolean;
        contextLength: number;
        maxCompletionTokens: number;
    }>>;
    pricing: z.ZodObject<{
        prompt: z.ZodString;
        completion: z.ZodString;
        image: z.ZodOptional<z.ZodString>;
        request: z.ZodOptional<z.ZodString>;
        webSearch: z.ZodOptional<z.ZodString>;
        internalReasoning: z.ZodOptional<z.ZodString>;
        inputCacheRead: z.ZodOptional<z.ZodString>;
        inputCacheWrite: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        prompt: string;
        completion: string;
        image?: string | undefined;
        request?: string | undefined;
        webSearch?: string | undefined;
        internalReasoning?: string | undefined;
        inputCacheRead?: string | undefined;
        inputCacheWrite?: string | undefined;
    }, {
        prompt: string;
        completion: string;
        image?: string | undefined;
        request?: string | undefined;
        webSearch?: string | undefined;
        internalReasoning?: string | undefined;
        inputCacheRead?: string | undefined;
        inputCacheWrite?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    created: number;
    pricing: {
        prompt: string;
        completion: string;
        image?: string | undefined;
        request?: string | undefined;
        webSearch?: string | undefined;
        internalReasoning?: string | undefined;
        inputCacheRead?: string | undefined;
        inputCacheWrite?: string | undefined;
    };
    description?: string | undefined;
    architecture?: {
        inputModalities: string[];
        outputModalities: string[];
        tokenizer: string;
        instructType: string;
    } | undefined;
    topProvider?: {
        isModerated: boolean;
        contextLength: number;
        maxCompletionTokens: number;
    } | undefined;
}, {
    id: string;
    name: string;
    created: number;
    pricing: {
        prompt: string;
        completion: string;
        image?: string | undefined;
        request?: string | undefined;
        webSearch?: string | undefined;
        internalReasoning?: string | undefined;
        inputCacheRead?: string | undefined;
        inputCacheWrite?: string | undefined;
    };
    description?: string | undefined;
    architecture?: {
        inputModalities: string[];
        outputModalities: string[];
        tokenizer: string;
        instructType: string;
    } | undefined;
    topProvider?: {
        isModerated: boolean;
        contextLength: number;
        maxCompletionTokens: number;
    } | undefined;
}>;
export declare const listModelsResponseSchema: z.ZodObject<{
    text: z.ZodArray<z.ZodObject<{
        provider: z.ZodString;
        configured: z.ZodBoolean;
        models: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            created: z.ZodNumber;
            description: z.ZodOptional<z.ZodString>;
            architecture: z.ZodOptional<z.ZodObject<{
                inputModalities: z.ZodArray<z.ZodString, "many">;
                outputModalities: z.ZodArray<z.ZodString, "many">;
                tokenizer: z.ZodString;
                instructType: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            }, {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            }>>;
            topProvider: z.ZodOptional<z.ZodObject<{
                isModerated: z.ZodBoolean;
                contextLength: z.ZodNumber;
                maxCompletionTokens: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            }, {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            }>>;
            pricing: z.ZodObject<{
                prompt: z.ZodString;
                completion: z.ZodString;
                image: z.ZodOptional<z.ZodString>;
                request: z.ZodOptional<z.ZodString>;
                webSearch: z.ZodOptional<z.ZodString>;
                internalReasoning: z.ZodOptional<z.ZodString>;
                inputCacheRead: z.ZodOptional<z.ZodString>;
                inputCacheWrite: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            }, {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }, {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        configured: boolean;
        models: {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }[];
    }, {
        provider: string;
        configured: boolean;
        models: {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }[];
    }>, "many">;
    image: z.ZodArray<z.ZodObject<{
        provider: z.ZodString;
        configured: z.ZodBoolean;
        models: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            created: z.ZodNumber;
            description: z.ZodOptional<z.ZodString>;
            architecture: z.ZodOptional<z.ZodObject<{
                inputModalities: z.ZodArray<z.ZodString, "many">;
                outputModalities: z.ZodArray<z.ZodString, "many">;
                tokenizer: z.ZodString;
                instructType: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            }, {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            }>>;
            topProvider: z.ZodOptional<z.ZodObject<{
                isModerated: z.ZodBoolean;
                contextLength: z.ZodNumber;
                maxCompletionTokens: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            }, {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            }>>;
            pricing: z.ZodObject<{
                prompt: z.ZodString;
                completion: z.ZodString;
                image: z.ZodOptional<z.ZodString>;
                request: z.ZodOptional<z.ZodString>;
                webSearch: z.ZodOptional<z.ZodString>;
                internalReasoning: z.ZodOptional<z.ZodString>;
                inputCacheRead: z.ZodOptional<z.ZodString>;
                inputCacheWrite: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            }, {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }, {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        configured: boolean;
        models: {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }[];
    }, {
        provider: string;
        configured: boolean;
        models: {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    text: {
        provider: string;
        configured: boolean;
        models: {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }[];
    }[];
    image: {
        provider: string;
        configured: boolean;
        models: {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }[];
    }[];
}, {
    text: {
        provider: string;
        configured: boolean;
        models: {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }[];
    }[];
    image: {
        provider: string;
        configured: boolean;
        models: {
            id: string;
            name: string;
            created: number;
            pricing: {
                prompt: string;
                completion: string;
                image?: string | undefined;
                request?: string | undefined;
                webSearch?: string | undefined;
                internalReasoning?: string | undefined;
                inputCacheRead?: string | undefined;
                inputCacheWrite?: string | undefined;
            };
            description?: string | undefined;
            architecture?: {
                inputModalities: string[];
                outputModalities: string[];
                tokenizer: string;
                instructType: string;
            } | undefined;
            topProvider?: {
                isModerated: boolean;
                contextLength: number;
                maxCompletionTokens: number;
            } | undefined;
        }[];
    }[];
}>;
export declare const createAIConfigurationRequestSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    inputModality: z.ZodArray<z.ZodEnum<["text", "image"]>, "many">;
    outputModality: z.ZodArray<z.ZodEnum<["text", "image"]>, "many">;
    provider: z.ZodString;
    modelId: z.ZodString;
    systemPrompt: z.ZodOptional<z.ZodString>;
}, "id">, "strip", z.ZodTypeAny, {
    inputModality: ("text" | "image")[];
    outputModality: ("text" | "image")[];
    provider: string;
    modelId: string;
    systemPrompt?: string | undefined;
}, {
    inputModality: ("text" | "image")[];
    outputModality: ("text" | "image")[];
    provider: string;
    modelId: string;
    systemPrompt?: string | undefined;
}>;
export declare const updateAIConfigurationRequestSchema: z.ZodObject<{
    systemPrompt: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    systemPrompt: string | null;
}, {
    systemPrompt: string | null;
}>;
export declare const listAIUsageResponseSchema: z.ZodObject<{
    records: z.ZodArray<z.ZodObject<{
        configId: z.ZodString;
        inputTokens: z.ZodOptional<z.ZodNumber>;
        outputTokens: z.ZodOptional<z.ZodNumber>;
        imageCount: z.ZodOptional<z.ZodNumber>;
        imageResolution: z.ZodOptional<z.ZodString>;
    } & {
        id: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        configId: string;
        createdAt: Date;
        inputTokens?: number | undefined;
        outputTokens?: number | undefined;
        imageCount?: number | undefined;
        imageResolution?: string | undefined;
    }, {
        id: string;
        configId: string;
        createdAt: Date;
        inputTokens?: number | undefined;
        outputTokens?: number | undefined;
        imageCount?: number | undefined;
        imageResolution?: string | undefined;
    }>, "many">;
    total: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    records: {
        id: string;
        configId: string;
        createdAt: Date;
        inputTokens?: number | undefined;
        outputTokens?: number | undefined;
        imageCount?: number | undefined;
        imageResolution?: string | undefined;
    }[];
    total: number;
}, {
    records: {
        id: string;
        configId: string;
        createdAt: Date;
        inputTokens?: number | undefined;
        outputTokens?: number | undefined;
        imageCount?: number | undefined;
        imageResolution?: string | undefined;
    }[];
    total: number;
}>;
export declare const getAIUsageRequestSchema: z.ZodObject<{
    startDate: z.ZodOptional<z.ZodString>;
    endDate: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodString>;
    offset: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    limit: string;
    offset: string;
    startDate?: string | undefined;
    endDate?: string | undefined;
}, {
    startDate?: string | undefined;
    endDate?: string | undefined;
    limit?: string | undefined;
    offset?: string | undefined;
}>;
export declare const getAIUsageSummaryRequestSchema: z.ZodObject<{
    configId: z.ZodOptional<z.ZodString>;
    startDate: z.ZodOptional<z.ZodString>;
    endDate: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    configId?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
}, {
    configId?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
}>;
export type ChatMessageSchema = z.infer<typeof chatMessageSchema>;
export type ChatCompletionRequest = z.infer<typeof chatCompletionRequestSchema>;
export type ChatCompletionResponse = z.infer<typeof chatCompletionResponseSchema>;
export type ImageGenerationRequest = z.infer<typeof imageGenerationRequestSchema>;
export type ImageGenerationResponse = z.infer<typeof imageGenerationResponseSchema>;
export type OpenRouterModel = z.infer<typeof openRouterModelSchema>;
export type ListModelsResponse = z.infer<typeof listModelsResponseSchema>;
export type CreateAIConfigurationRequest = z.infer<typeof createAIConfigurationRequestSchema>;
export type UpdateAIConfigurationRequest = z.infer<typeof updateAIConfigurationRequestSchema>;
export type ListAIUsageResponse = z.infer<typeof listAIUsageResponseSchema>;
export type GetAIUsageRequest = z.infer<typeof getAIUsageRequestSchema>;
export type GetAIUsageSummaryRequest = z.infer<typeof getAIUsageSummaryRequestSchema>;
//# sourceMappingURL=ai-api.schema.d.ts.map