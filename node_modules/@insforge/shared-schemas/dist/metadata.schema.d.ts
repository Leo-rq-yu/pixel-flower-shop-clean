import { z } from 'zod';
export declare const authMetadataSchema: z.ZodObject<{
    oauths: z.ZodArray<z.ZodObject<{
        provider: z.ZodString;
        clientId: z.ZodOptional<z.ZodString>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        redirectUri: z.ZodOptional<z.ZodString>;
        useSharedKey: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        useSharedKey: boolean;
        redirectUri?: string | undefined;
        clientId?: string | undefined;
        scopes?: string[] | undefined;
    }, {
        provider: string;
        useSharedKey: boolean;
        redirectUri?: string | undefined;
        clientId?: string | undefined;
        scopes?: string[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    oauths: {
        provider: string;
        useSharedKey: boolean;
        redirectUri?: string | undefined;
        clientId?: string | undefined;
        scopes?: string[] | undefined;
    }[];
}, {
    oauths: {
        provider: string;
        useSharedKey: boolean;
        redirectUri?: string | undefined;
        clientId?: string | undefined;
        scopes?: string[] | undefined;
    }[];
}>;
export declare const databaseMetadataSchema: z.ZodObject<{
    tables: z.ZodArray<z.ZodObject<{
        tableName: z.ZodString;
        columns: z.ZodArray<z.ZodObject<{
            columnName: z.ZodString;
            type: z.ZodUnion<[z.ZodEnum<[import("./database.schema").ColumnType.STRING, import("./database.schema").ColumnType.DATE, import("./database.schema").ColumnType.DATETIME, import("./database.schema").ColumnType.INTEGER, import("./database.schema").ColumnType.FLOAT, import("./database.schema").ColumnType.BOOLEAN, import("./database.schema").ColumnType.UUID, import("./database.schema").ColumnType.JSON]>, z.ZodString]>;
            defaultValue: z.ZodOptional<z.ZodString>;
            isPrimaryKey: z.ZodOptional<z.ZodBoolean>;
            isNullable: z.ZodBoolean;
            isUnique: z.ZodBoolean;
            foreignKey: z.ZodOptional<z.ZodObject<{
                referenceTable: z.ZodString;
                referenceColumn: z.ZodString;
                onDelete: z.ZodEnum<["CASCADE", "SET NULL", "SET DEFAULT", "RESTRICT", "NO ACTION"]>;
                onUpdate: z.ZodEnum<["CASCADE", "RESTRICT", "NO ACTION"]>;
            }, "strip", z.ZodTypeAny, {
                referenceTable: string;
                referenceColumn: string;
                onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
            }, {
                referenceTable: string;
                referenceColumn: string;
                onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            columnName: string;
            isNullable: boolean;
            isUnique: boolean;
            defaultValue?: string | undefined;
            isPrimaryKey?: boolean | undefined;
            foreignKey?: {
                referenceTable: string;
                referenceColumn: string;
                onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
            } | undefined;
        }, {
            type: string;
            columnName: string;
            isNullable: boolean;
            isUnique: boolean;
            defaultValue?: string | undefined;
            isPrimaryKey?: boolean | undefined;
            foreignKey?: {
                referenceTable: string;
                referenceColumn: string;
                onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
            } | undefined;
        }>, "many">;
        recordCount: z.ZodDefault<z.ZodNumber>;
        createdAt: z.ZodOptional<z.ZodString>;
        updatedAt: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tableName: string;
        columns: {
            type: string;
            columnName: string;
            isNullable: boolean;
            isUnique: boolean;
            defaultValue?: string | undefined;
            isPrimaryKey?: boolean | undefined;
            foreignKey?: {
                referenceTable: string;
                referenceColumn: string;
                onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
            } | undefined;
        }[];
        recordCount: number;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }, {
        tableName: string;
        columns: {
            type: string;
            columnName: string;
            isNullable: boolean;
            isUnique: boolean;
            defaultValue?: string | undefined;
            isPrimaryKey?: boolean | undefined;
            foreignKey?: {
                referenceTable: string;
                referenceColumn: string;
                onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
            } | undefined;
        }[];
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        recordCount?: number | undefined;
    }>, "many">;
    totalSize: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    tables: {
        tableName: string;
        columns: {
            type: string;
            columnName: string;
            isNullable: boolean;
            isUnique: boolean;
            defaultValue?: string | undefined;
            isPrimaryKey?: boolean | undefined;
            foreignKey?: {
                referenceTable: string;
                referenceColumn: string;
                onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
            } | undefined;
        }[];
        recordCount: number;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[];
    totalSize: number;
}, {
    tables: {
        tableName: string;
        columns: {
            type: string;
            columnName: string;
            isNullable: boolean;
            isUnique: boolean;
            defaultValue?: string | undefined;
            isPrimaryKey?: boolean | undefined;
            foreignKey?: {
                referenceTable: string;
                referenceColumn: string;
                onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
            } | undefined;
        }[];
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        recordCount?: number | undefined;
    }[];
    totalSize: number;
}>;
export declare const bucketMetadataSchema: z.ZodObject<{
    name: z.ZodString;
    public: z.ZodBoolean;
    createdAt: z.ZodString;
} & {
    objectCount: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    createdAt: string;
    name: string;
    public: boolean;
    objectCount?: number | undefined;
}, {
    createdAt: string;
    name: string;
    public: boolean;
    objectCount?: number | undefined;
}>;
export declare const storageMetadataSchema: z.ZodObject<{
    buckets: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        public: z.ZodBoolean;
        createdAt: z.ZodString;
    } & {
        objectCount: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        createdAt: string;
        name: string;
        public: boolean;
        objectCount?: number | undefined;
    }, {
        createdAt: string;
        name: string;
        public: boolean;
        objectCount?: number | undefined;
    }>, "many">;
    totalSize: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    totalSize: number;
    buckets: {
        createdAt: string;
        name: string;
        public: boolean;
        objectCount?: number | undefined;
    }[];
}, {
    totalSize: number;
    buckets: {
        createdAt: string;
        name: string;
        public: boolean;
        objectCount?: number | undefined;
    }[];
}>;
export declare const edgeFunctionMetadataSchema: z.ZodObject<{
    slug: z.ZodString;
    name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    status: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: string;
    name: string;
    description: string | null;
    slug: string;
}, {
    status: string;
    name: string;
    description: string | null;
    slug: string;
}>;
export declare const aiMetadataSchema: z.ZodObject<{
    models: z.ZodArray<z.ZodObject<{
        inputModality: z.ZodArray<z.ZodString, "many">;
        outputModality: z.ZodArray<z.ZodString, "many">;
        modelId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        inputModality: string[];
        outputModality: string[];
        modelId: string;
    }, {
        inputModality: string[];
        outputModality: string[];
        modelId: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    models: {
        inputModality: string[];
        outputModality: string[];
        modelId: string;
    }[];
}, {
    models: {
        inputModality: string[];
        outputModality: string[];
        modelId: string;
    }[];
}>;
export declare const appMetaDataSchema: z.ZodObject<{
    auth: z.ZodObject<{
        oauths: z.ZodArray<z.ZodObject<{
            provider: z.ZodString;
            clientId: z.ZodOptional<z.ZodString>;
            scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            redirectUri: z.ZodOptional<z.ZodString>;
            useSharedKey: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            provider: string;
            useSharedKey: boolean;
            redirectUri?: string | undefined;
            clientId?: string | undefined;
            scopes?: string[] | undefined;
        }, {
            provider: string;
            useSharedKey: boolean;
            redirectUri?: string | undefined;
            clientId?: string | undefined;
            scopes?: string[] | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        oauths: {
            provider: string;
            useSharedKey: boolean;
            redirectUri?: string | undefined;
            clientId?: string | undefined;
            scopes?: string[] | undefined;
        }[];
    }, {
        oauths: {
            provider: string;
            useSharedKey: boolean;
            redirectUri?: string | undefined;
            clientId?: string | undefined;
            scopes?: string[] | undefined;
        }[];
    }>;
    database: z.ZodObject<{
        tables: z.ZodArray<z.ZodObject<{
            tableName: z.ZodString;
            columns: z.ZodArray<z.ZodObject<{
                columnName: z.ZodString;
                type: z.ZodUnion<[z.ZodEnum<[import("./database.schema").ColumnType.STRING, import("./database.schema").ColumnType.DATE, import("./database.schema").ColumnType.DATETIME, import("./database.schema").ColumnType.INTEGER, import("./database.schema").ColumnType.FLOAT, import("./database.schema").ColumnType.BOOLEAN, import("./database.schema").ColumnType.UUID, import("./database.schema").ColumnType.JSON]>, z.ZodString]>;
                defaultValue: z.ZodOptional<z.ZodString>;
                isPrimaryKey: z.ZodOptional<z.ZodBoolean>;
                isNullable: z.ZodBoolean;
                isUnique: z.ZodBoolean;
                foreignKey: z.ZodOptional<z.ZodObject<{
                    referenceTable: z.ZodString;
                    referenceColumn: z.ZodString;
                    onDelete: z.ZodEnum<["CASCADE", "SET NULL", "SET DEFAULT", "RESTRICT", "NO ACTION"]>;
                    onUpdate: z.ZodEnum<["CASCADE", "RESTRICT", "NO ACTION"]>;
                }, "strip", z.ZodTypeAny, {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                }, {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                columnName: string;
                isNullable: boolean;
                isUnique: boolean;
                defaultValue?: string | undefined;
                isPrimaryKey?: boolean | undefined;
                foreignKey?: {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                } | undefined;
            }, {
                type: string;
                columnName: string;
                isNullable: boolean;
                isUnique: boolean;
                defaultValue?: string | undefined;
                isPrimaryKey?: boolean | undefined;
                foreignKey?: {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                } | undefined;
            }>, "many">;
            recordCount: z.ZodDefault<z.ZodNumber>;
            createdAt: z.ZodOptional<z.ZodString>;
            updatedAt: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            tableName: string;
            columns: {
                type: string;
                columnName: string;
                isNullable: boolean;
                isUnique: boolean;
                defaultValue?: string | undefined;
                isPrimaryKey?: boolean | undefined;
                foreignKey?: {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                } | undefined;
            }[];
            recordCount: number;
            createdAt?: string | undefined;
            updatedAt?: string | undefined;
        }, {
            tableName: string;
            columns: {
                type: string;
                columnName: string;
                isNullable: boolean;
                isUnique: boolean;
                defaultValue?: string | undefined;
                isPrimaryKey?: boolean | undefined;
                foreignKey?: {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                } | undefined;
            }[];
            createdAt?: string | undefined;
            updatedAt?: string | undefined;
            recordCount?: number | undefined;
        }>, "many">;
        totalSize: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        tables: {
            tableName: string;
            columns: {
                type: string;
                columnName: string;
                isNullable: boolean;
                isUnique: boolean;
                defaultValue?: string | undefined;
                isPrimaryKey?: boolean | undefined;
                foreignKey?: {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                } | undefined;
            }[];
            recordCount: number;
            createdAt?: string | undefined;
            updatedAt?: string | undefined;
        }[];
        totalSize: number;
    }, {
        tables: {
            tableName: string;
            columns: {
                type: string;
                columnName: string;
                isNullable: boolean;
                isUnique: boolean;
                defaultValue?: string | undefined;
                isPrimaryKey?: boolean | undefined;
                foreignKey?: {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                } | undefined;
            }[];
            createdAt?: string | undefined;
            updatedAt?: string | undefined;
            recordCount?: number | undefined;
        }[];
        totalSize: number;
    }>;
    storage: z.ZodObject<{
        buckets: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            public: z.ZodBoolean;
            createdAt: z.ZodString;
        } & {
            objectCount: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            createdAt: string;
            name: string;
            public: boolean;
            objectCount?: number | undefined;
        }, {
            createdAt: string;
            name: string;
            public: boolean;
            objectCount?: number | undefined;
        }>, "many">;
        totalSize: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalSize: number;
        buckets: {
            createdAt: string;
            name: string;
            public: boolean;
            objectCount?: number | undefined;
        }[];
    }, {
        totalSize: number;
        buckets: {
            createdAt: string;
            name: string;
            public: boolean;
            objectCount?: number | undefined;
        }[];
    }>;
    aiIntegration: z.ZodOptional<z.ZodObject<{
        models: z.ZodArray<z.ZodObject<{
            inputModality: z.ZodArray<z.ZodString, "many">;
            outputModality: z.ZodArray<z.ZodString, "many">;
            modelId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            inputModality: string[];
            outputModality: string[];
            modelId: string;
        }, {
            inputModality: string[];
            outputModality: string[];
            modelId: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        models: {
            inputModality: string[];
            outputModality: string[];
            modelId: string;
        }[];
    }, {
        models: {
            inputModality: string[];
            outputModality: string[];
            modelId: string;
        }[];
    }>>;
    functions: z.ZodArray<z.ZodObject<{
        slug: z.ZodString;
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        status: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: string;
        name: string;
        description: string | null;
        slug: string;
    }, {
        status: string;
        name: string;
        description: string | null;
        slug: string;
    }>, "many">;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    functions: {
        status: string;
        name: string;
        description: string | null;
        slug: string;
    }[];
    auth: {
        oauths: {
            provider: string;
            useSharedKey: boolean;
            redirectUri?: string | undefined;
            clientId?: string | undefined;
            scopes?: string[] | undefined;
        }[];
    };
    database: {
        tables: {
            tableName: string;
            columns: {
                type: string;
                columnName: string;
                isNullable: boolean;
                isUnique: boolean;
                defaultValue?: string | undefined;
                isPrimaryKey?: boolean | undefined;
                foreignKey?: {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                } | undefined;
            }[];
            recordCount: number;
            createdAt?: string | undefined;
            updatedAt?: string | undefined;
        }[];
        totalSize: number;
    };
    storage: {
        totalSize: number;
        buckets: {
            createdAt: string;
            name: string;
            public: boolean;
            objectCount?: number | undefined;
        }[];
    };
    aiIntegration?: {
        models: {
            inputModality: string[];
            outputModality: string[];
            modelId: string;
        }[];
    } | undefined;
    version?: string | undefined;
}, {
    functions: {
        status: string;
        name: string;
        description: string | null;
        slug: string;
    }[];
    auth: {
        oauths: {
            provider: string;
            useSharedKey: boolean;
            redirectUri?: string | undefined;
            clientId?: string | undefined;
            scopes?: string[] | undefined;
        }[];
    };
    database: {
        tables: {
            tableName: string;
            columns: {
                type: string;
                columnName: string;
                isNullable: boolean;
                isUnique: boolean;
                defaultValue?: string | undefined;
                isPrimaryKey?: boolean | undefined;
                foreignKey?: {
                    referenceTable: string;
                    referenceColumn: string;
                    onDelete: "CASCADE" | "RESTRICT" | "NO ACTION" | "SET NULL" | "SET DEFAULT";
                    onUpdate: "CASCADE" | "RESTRICT" | "NO ACTION";
                } | undefined;
            }[];
            createdAt?: string | undefined;
            updatedAt?: string | undefined;
            recordCount?: number | undefined;
        }[];
        totalSize: number;
    };
    storage: {
        totalSize: number;
        buckets: {
            createdAt: string;
            name: string;
            public: boolean;
            objectCount?: number | undefined;
        }[];
    };
    aiIntegration?: {
        models: {
            inputModality: string[];
            outputModality: string[];
            modelId: string;
        }[];
    } | undefined;
    version?: string | undefined;
}>;
export type AuthMetadataSchema = z.infer<typeof authMetadataSchema>;
export type DatabaseMetadataSchema = z.infer<typeof databaseMetadataSchema>;
export type BucketMetadataSchema = z.infer<typeof bucketMetadataSchema>;
export type StorageMetadataSchema = z.infer<typeof storageMetadataSchema>;
export type EdgeFunctionMetadataSchema = z.infer<typeof edgeFunctionMetadataSchema>;
export type AIMetadataSchema = z.infer<typeof aiMetadataSchema>;
export type AppMetadataSchema = z.infer<typeof appMetaDataSchema>;
//# sourceMappingURL=metadata.schema.d.ts.map