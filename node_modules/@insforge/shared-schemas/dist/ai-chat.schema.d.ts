import { z } from 'zod';
export declare const chatMessageSchema: z.ZodObject<{
    role: z.ZodEnum<["user", "assistant", "system"]>;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    role: "user" | "assistant" | "system";
    content: string;
}, {
    role: "user" | "assistant" | "system";
    content: string;
}>;
export declare const chatOptionsSchema: z.ZodObject<{
    model: z.ZodString;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    systemPrompt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    model: string;
    systemPrompt?: string | undefined;
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
}, {
    model: string;
    systemPrompt?: string | undefined;
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
}>;
export declare const chatRequestSchema: z.ZodObject<{
    model: z.ZodString;
    messages: z.ZodOptional<z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "assistant", "system"]>;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "user" | "assistant" | "system";
        content: string;
    }, {
        role: "user" | "assistant" | "system";
        content: string;
    }>, "many">>;
    stream: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    systemPrompt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    model: string;
    systemPrompt?: string | undefined;
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    messages?: {
        role: "user" | "assistant" | "system";
        content: string;
    }[] | undefined;
    stream?: boolean | undefined;
}, {
    model: string;
    systemPrompt?: string | undefined;
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topP?: number | undefined;
    messages?: {
        role: "user" | "assistant" | "system";
        content: string;
    }[] | undefined;
    stream?: boolean | undefined;
}>;
export declare const chatCompletionResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    content: z.ZodString;
    metadata: z.ZodOptional<z.ZodObject<{
        model: z.ZodString;
        usage: z.ZodOptional<z.ZodObject<{
            promptTokens: z.ZodOptional<z.ZodNumber>;
            completionTokens: z.ZodOptional<z.ZodNumber>;
            totalTokens: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        }, {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    }, {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    content: string;
    success: boolean;
    metadata?: {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    } | undefined;
}, {
    content: string;
    success: boolean;
    metadata?: {
        model: string;
        usage?: {
            totalTokens?: number | undefined;
            promptTokens?: number | undefined;
            completionTokens?: number | undefined;
        } | undefined;
    } | undefined;
}>;
export type ChatMessage = z.infer<typeof chatMessageSchema>;
export type ChatOptions = z.infer<typeof chatOptionsSchema>;
export type ChatRequest = z.infer<typeof chatRequestSchema>;
export type ChatCompletionResponse = z.infer<typeof chatCompletionResponseSchema>;
//# sourceMappingURL=ai-chat.schema.d.ts.map