import { z } from 'zod';
export declare const createBucketRequestSchema: z.ZodObject<{
    bucketName: z.ZodString;
    isPublic: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    bucketName: string;
    isPublic: boolean;
}, {
    bucketName: string;
    isPublic?: boolean | undefined;
}>;
export declare const updateBucketRequestSchema: z.ZodObject<{
    isPublic: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    isPublic: boolean;
}, {
    isPublic: boolean;
}>;
export declare const listObjectsResponseSchema: z.ZodObject<{
    objects: z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        bucket: z.ZodString;
        size: z.ZodNumber;
        mimeType: z.ZodOptional<z.ZodString>;
        uploadedAt: z.ZodString;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        key: string;
        bucket: string;
        size: number;
        uploadedAt: string;
        mimeType?: string | undefined;
    }, {
        url: string;
        key: string;
        bucket: string;
        size: number;
        uploadedAt: string;
        mimeType?: string | undefined;
    }>, "many">;
    pagination: z.ZodObject<{
        offset: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        total: number;
        limit: number;
        offset: number;
    }, {
        total: number;
        limit: number;
        offset: number;
    }>;
}, "strip", z.ZodTypeAny, {
    pagination: {
        total: number;
        limit: number;
        offset: number;
    };
    objects: {
        url: string;
        key: string;
        bucket: string;
        size: number;
        uploadedAt: string;
        mimeType?: string | undefined;
    }[];
}, {
    pagination: {
        total: number;
        limit: number;
        offset: number;
    };
    objects: {
        url: string;
        key: string;
        bucket: string;
        size: number;
        uploadedAt: string;
        mimeType?: string | undefined;
    }[];
}>;
export declare const uploadStrategyRequestSchema: z.ZodObject<{
    filename: z.ZodString;
    contentType: z.ZodOptional<z.ZodString>;
    size: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    filename: string;
    size?: number | undefined;
    contentType?: string | undefined;
}, {
    filename: string;
    size?: number | undefined;
    contentType?: string | undefined;
}>;
export declare const uploadStrategyResponseSchema: z.ZodObject<{
    method: z.ZodEnum<["presigned", "direct"]>;
    uploadUrl: z.ZodString;
    fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    key: z.ZodString;
    confirmRequired: z.ZodBoolean;
    confirmUrl: z.ZodOptional<z.ZodString>;
    expiresAt: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    key: string;
    method: "presigned" | "direct";
    uploadUrl: string;
    confirmRequired: boolean;
    fields?: Record<string, string> | undefined;
    confirmUrl?: string | undefined;
    expiresAt?: Date | undefined;
}, {
    key: string;
    method: "presigned" | "direct";
    uploadUrl: string;
    confirmRequired: boolean;
    fields?: Record<string, string> | undefined;
    confirmUrl?: string | undefined;
    expiresAt?: Date | undefined;
}>;
export declare const downloadStrategyRequestSchema: z.ZodObject<{
    expiresIn: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    expiresIn: number;
}, {
    expiresIn?: number | undefined;
}>;
export declare const downloadStrategyResponseSchema: z.ZodObject<{
    method: z.ZodEnum<["presigned", "direct"]>;
    url: z.ZodString;
    expiresAt: z.ZodOptional<z.ZodDate>;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    url: string;
    method: "presigned" | "direct";
    expiresAt?: Date | undefined;
    headers?: Record<string, string> | undefined;
}, {
    url: string;
    method: "presigned" | "direct";
    expiresAt?: Date | undefined;
    headers?: Record<string, string> | undefined;
}>;
export declare const confirmUploadRequestSchema: z.ZodObject<{
    size: z.ZodNumber;
    contentType: z.ZodOptional<z.ZodString>;
    etag: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    size: number;
    contentType?: string | undefined;
    etag?: string | undefined;
}, {
    size: number;
    contentType?: string | undefined;
    etag?: string | undefined;
}>;
export type CreateBucketRequest = z.infer<typeof createBucketRequestSchema>;
export type UpdateBucketRequest = z.infer<typeof updateBucketRequestSchema>;
export type ListObjectsResponseSchema = z.infer<typeof listObjectsResponseSchema>;
export type UploadStrategyRequest = z.infer<typeof uploadStrategyRequestSchema>;
export type UploadStrategyResponse = z.infer<typeof uploadStrategyResponseSchema>;
export type DownloadStrategyRequest = z.infer<typeof downloadStrategyRequestSchema>;
export type DownloadStrategyResponse = z.infer<typeof downloadStrategyResponseSchema>;
export type ConfirmUploadRequest = z.infer<typeof confirmUploadRequestSchema>;
//# sourceMappingURL=storage-api.schema.d.ts.map