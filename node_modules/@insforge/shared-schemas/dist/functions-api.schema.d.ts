import { z } from 'zod';
export declare const functionUploadRequestSchema: z.ZodObject<{
    name: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    code: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodOptional<z.ZodEnum<["draft", "active"]>>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    status: "draft" | "active";
    name: string;
    description?: string | undefined;
    slug?: string | undefined;
}, {
    code: string;
    name: string;
    status?: "draft" | "active" | undefined;
    description?: string | undefined;
    slug?: string | undefined;
}>;
export declare const functionUpdateRequestSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    code: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["draft", "active"]>>;
}, "strip", z.ZodTypeAny, {
    code?: string | undefined;
    status?: "draft" | "active" | undefined;
    name?: string | undefined;
    description?: string | undefined;
}, {
    code?: string | undefined;
    status?: "draft" | "active" | undefined;
    name?: string | undefined;
    description?: string | undefined;
}>;
export type FunctionUploadRequest = z.infer<typeof functionUploadRequestSchema>;
export type FunctionUpdateRequest = z.infer<typeof functionUpdateRequestSchema>;
//# sourceMappingURL=functions-api.schema.d.ts.map